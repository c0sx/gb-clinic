{"version":3,"sources":["api/responseInterceptor.js","api/getInfo.js","api/signout.js","store/doctor/selectors.js","initialize/Initialize.js","api/signIn.js","store/doctor/index.js","saga/signInDoctorAsync.js","signin/Signin.js","api/getAppointments.js","store/appointments/index.js","saga/getAppointmentsAsync.js","store/appointments/selectors.js","saga/getDoctorInfoAsync.js","appointments/Appointments.js","app/App.js","store/sagas.js","store/reducer.js","store/index.js","index.js"],"names":["interceptResponse","response","intercept401","status","document","location","href","getInfo","a","fetch","json","Promise","reject","signOut","selectDoctorId","createSelector","state","doctor","id","Initialize","useState","isGuest","setGuest","doctorId","useSelector","history","useHistory","useEffect","replace","to","onClick","signIn","username","password","method","headers","body","JSON","stringify","createSlice","name","initialState","reducers","fillUser","action","payload","actions","reducer","signInWorker","signInWatcher","signInDoctorAsync","createAction","call","ok","put","takeLatest","type","Signin","setUsername","setPassword","dispatch","useDispatch","onSubmit","e","preventDefault","stopPropagation","value","onChange","target","getAppointments","appointments","fill","getAppointmentsWorker","getAppointmentsWatcher","getAppointmentsAsync","selectAppointments","getUserWorker","getUserWatcher","getDoctorInfoAsync","user","Appointments","length","map","one","surname","format","date","App","exact","path","component","sagas","all","combineReducers","sagaMiddleware","createSagaMiddleware","middleware","getDefaultMiddleware","store","configureStore","run","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8f7295ee.chunk.js","sourcesContent":["export const interceptResponse = response => {\n    return intercept401(response);\n}\n\nexport const intercept401 = response => {\n    if (response.status === 401) {\n        document.location.href = \"/doctor/sign-in\"\n        return false;\n    }\n\n    return true;\n}\n\n\n","import { interceptResponse } from \"./responseInterceptor\";\n\nexport const getInfo =  async () => {\n    const response = await fetch(\"/api/doctor/info\");\n\n    if (interceptResponse(response)) {\n        return response.json()\n    }\n\n    return Promise.reject();\n}\n","export const signOut = async () => {\n    return fetch(\"/api/doctor/sign-out\")\n}\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getDoctor = state => state.doctor;\n\nexport const selectDoctorId = createSelector(getDoctor, doctor => doctor.id);\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nimport { getInfo } from \"../api/getInfo\";\nimport { signOut } from \"../api/signout\";\nimport { selectDoctorId } from \"../store/doctor/selectors\";\n\nexport const Initialize = () => {\n    const [isGuest, setGuest] = useState(false);\n    const doctorId = useSelector(selectDoctorId);\n    const history = useHistory();\n\n    useEffect(() => {\n        if (doctorId) {\n            history.replace(\"/doctor/appointments\")\n        }\n    }, [history, doctorId])\n\n    useEffect(() => {\n        (async () => {\n            try {\n                await getInfo()\n                history.replace(\"/doctor/appointments\")\n            }\n            catch (e) {\n                setGuest(true);\n            }\n        })();\n    }, [history]);\n\n    return (\n        <>\n            <div>Загрузка...</div>\n            {isGuest ? <Link to={\"/doctor/sign-in\"}>Вход</Link> : null}\n            {doctorId ? <a href={\"/doctor/sign-in\"} onClick={signOut}>Выход</a> : null}\n        </>\n    )\n}\n","export const signIn = async ({ username, password }) => {\n    return fetch(\"/api/doctor/sign-in\", {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            username,\n            password\n        })\n    })\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    id: 0\n};\n\nconst doctor = createSlice({\n    name: \"user\",\n    initialState,\n    reducers: {\n        fillUser(state, action) {\n            state.id = action.payload.id;\n        }\n    }\n})\n\nexport const { actions, reducer } = doctor;\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { call, put, takeLatest} from \"redux-saga/effects\";\n\nimport { signIn } from \"../api/signIn\";\n\nimport { actions } from \"../store/doctor\";\n\nexport const signInDoctorAsync = createAction(\"signInDoctor\");\n\nfunction* signInWorker(action) {\n    const { username, password } = action.payload;\n\n    const response = yield call(signIn, {\n        username,\n        password\n    })\n\n    if (!response.ok) {\n        return;\n    }\n\n    yield put(actions.fillUser({ id: response.id }))\n    document.location.href = \"/doctor\"\n}\n\nexport function* signInWatcher() {\n    yield takeLatest(signInDoctorAsync.type, signInWorker);\n}\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { signInDoctorAsync } from \"../saga/signInDoctorAsync\";\n\nexport const Signin = () => {\n    const [username, setUsername] = useState(\"doctor\");\n    const [password, setPassword] = useState(\"12345\");\n\n    const dispatch = useDispatch();\n\n    const onSubmitHandler = e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        dispatch(signInDoctorAsync({ username, password }))\n    }\n\n    return (\n        <div>\n            <form onSubmit={onSubmitHandler}>\n                <div>\n                    <label>Логин</label>\n                    <input type={\"text\"} value={username} onChange={e => setUsername(e.target.value)}/>\n                </div>\n                <div>\n                    <label>Пароль</label>\n                    <input type={\"password\"} value={password} onChange={e => setPassword(e.target.value)}/>\n                </div>\n                <div>\n                    <input type={\"submit\"} value={\"Вход\"}/>\n                </div>\n            </form>\n        </div>\n    );\n};\n","import { interceptResponse } from \"./responseInterceptor\";\n\nexport const getAppointments = async () => {\n    const response = await fetch(\"/api/doctor/appointments\");\n\n    if (interceptResponse(response)) {\n        return response.json()\n    }\n\n    return Promise.reject();\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    appointments: []\n}\n\nconst appointments = createSlice({\n    name: \"appointments\",\n    initialState,\n    reducers: {\n        fill: (state, action) => {\n            state.appointments = action.payload;\n        }\n    }\n})\n\nexport const { actions, reducer } = appointments;\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { call, put, takeLatest } from \"redux-saga/effects\";\n\nimport { getAppointments } from \"../api/getAppointments\";\n\nimport { actions } from \"../store/appointments\";\n\nexport const getAppointmentsAsync = createAction(\"getAppointmentsAsync\")\n\nfunction* getAppointmentsWorker() {\n    const appointments = yield call(getAppointments)\n    yield put(actions.fill(appointments))\n}\n\nexport function* getAppointmentsWatcher() {\n    yield takeLatest(getAppointmentsAsync.type, getAppointmentsWorker)\n}\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getAppointments = state => state.appointments;\n\nexport const selectAppointments = createSelector(getAppointments, appointments => appointments.appointments)\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { call, put, takeLatest } from \"redux-saga/effects\";\n\nimport { getInfo } from \"../api/getInfo\";\n\nimport { actions } from \"../store/doctor\"\n\nexport const getDoctorInfoAsync = createAction(\"getUserAsync\");\n\nfunction* getUserWorker() {\n    const user = yield call(getInfo);\n    yield put(actions.fillUser(user));\n}\n\nexport function* getUserWatcher() {\n    yield takeLatest(getDoctorInfoAsync.type, getUserWorker);\n}\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { format } from \"date-fns\";\n\nimport { getAppointmentsAsync } from \"../saga/getAppointmentsAsync\";\nimport { selectAppointments } from \"../store/appointments/selectors\";\nimport { selectDoctorId } from \"../store/doctor/selectors\";\nimport { getDoctorInfoAsync } from \"../saga/getDoctorInfoAsync\";\nimport { signOut } from \"../api/signout\";\n\nexport const Appointments = () => {\n    const dispatch = useDispatch();\n    const appointments = useSelector(selectAppointments);\n    const doctorId = useSelector(selectDoctorId);\n\n    useEffect(() => {\n        dispatch(getDoctorInfoAsync())\n        dispatch(getAppointmentsAsync());\n    }, [dispatch])\n\n    return (\n        <div>\n            {doctorId ? <a href={\"/doctor/sign-in\"} onClick={signOut}>Выход</a> : null}\n            {appointments.length > 0 ?\n                (\n                    <ul>\n                        {appointments.map(one => (\n                            <li key={one.id}>\n                                <div>\n                                    {one.surname}\n                                    {one.name}\n                                    {format(one.date, \"dd.MM.yyyy HH:mm\")}\n                                </div>\n                            </li>\n                        ))}\n                    </ul>\n                )\n                :\n                <p>Нет записей</p>\n            }\n        </div>\n    )\n}\n","import { Route, Switch, Redirect } from \"react-router-dom\";\n\nimport { Initialize } from \"../initialize/Initialize\";\nimport { Signin } from \"../signin/Signin\";\nimport { Appointments } from \"../appointments/Appointments\";\n\nexport const App = () => {\n    return (\n        <Switch>\n            <Route exact={true} path={\"/doctor\"} component={Initialize}/>\n            <Route path={\"/doctor/sign-in\"} component={Signin} />\n            <Route path={\"/doctor/appointments\"} component={Appointments}/>\n            <Redirect to={\"/doctor\"} />\n        </Switch>\n    )\n}\n","import { all, call } from \"redux-saga/effects\";\n\nimport { getUserWatcher } from \"../saga/getDoctorInfoAsync\";\nimport { signInWatcher } from \"../saga/signInDoctorAsync\";\nimport { getAppointmentsWatcher } from \"../saga/getAppointmentsAsync\";\n\nexport function* sagas() {\n    yield all([\n        call(getUserWatcher),\n        call(signInWatcher),\n        call(getAppointmentsWatcher)\n    ])\n}\n","import { combineReducers } from \"redux\";\n\nimport { reducer as doctor } from \"./doctor\";\nimport { reducer as appointments } from \"./appointments\";\n\nexport const reducer = combineReducers({\n    doctor,\n    appointments\n})\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport { sagas } from \"./sagas\";\nimport { reducer } from \"./reducer\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [...getDefaultMiddleware(), sagaMiddleware];\n\nexport const store = configureStore({\n    reducer,\n    middleware\n});\n\nsagaMiddleware.run(sagas);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\n\nimport { App } from './app/App';\n\nimport { store } from \"./store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <BrowserRouter>\n                <App />\n            </BrowserRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}