{"version":3,"sources":["api/responseInterceptor.js","api/getInfo.js","api/signOut.js","store/patient/selectors.js","initialize/Initialize.js","api/signIn.js","store/patient/index.js","saga/signInAsync.js","signin/Signin.js","api/signUp.js","saga/signUpAsync.js","signup/Signup.js","saga/getPatientInfoAsync.js","api/getAppointments.js","store/appointments/index.js","saga/getAppointmentsAsync.js","api/getDoctors.js","store/doctors/index.js","saga/getDoctorsAsync.js","api/registerAppointment.js","saga/registerAppointmentAsync.js","store/doctors/selectors.js","store/appointments/selectors.js","appointments/Appointments.js","app/App.js","store/sagas.js","store/reducer.js","store/index.js","index.js"],"names":["interceptResponse","response","intercept401","status","document","location","href","getInfo","a","fetch","json","Promise","reject","signOut","selectPatientId","createSelector","state","patient","id","Initialize","useState","isGuest","setGuest","patientId","useSelector","history","useHistory","useEffect","replace","to","onClick","signIn","username","password","method","headers","body","JSON","stringify","createSlice","name","initialState","reducers","fillUser","action","payload","actions","reducer","signInWorker","signInWatcher","signInAsync","createAction","call","ok","put","takeLatest","type","Signin","setUsername","setPassword","dispatch","useDispatch","onSubmit","e","preventDefault","stopPropagation","value","onChange","target","signUp","user","surname","dateOfBirth","getUnixTime","signUpWorker","signUpWatcher","signUpAsync","console","log","parse","Date","Signup","setSurname","setName","setDateOfBirth","getPatientWorker","getPatientWatcher","getPatientInfoAsync","getAppointments","appointments","fill","getAppointmentsWorker","getAppointmentsWatcher","getAppointmentsAsync","getDoctors","doctors","getDoctorsWorker","getDoctorsWatcher","getDoctorsAsync","registerAppointment","doctorId","date","registerAppointmentWorker","registerAppointmentWatcher","registerAppointmentAsync","selectDoctors","selectAppointments","Appointments","setDoctorId","appointmentAt","setAppointmentAt","required","map","one","length","format","App","exact","path","component","sagas","all","combineReducers","sagaMiddleware","createSagaMiddleware","middleware","getDefaultMiddleware","store","configureStore","run","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8b201d6e.chunk.js","sourcesContent":["export const interceptResponse = response => {\n    return intercept401(response);\n}\n\nexport const intercept401 = response => {\n    if (response.status === 401) {\n        document.location.href = \"/patient/sign-in\"\n        return false;\n    }\n\n    return true;\n}\n\n\n","import { interceptResponse} from \"./responseInterceptor\";\n\nexport const getInfo = async () => {\n    const response = await fetch(\"/api/patient/info\");\n\n    if (interceptResponse(response)) {\n        return response.json()\n    }\n\n    return Promise.reject();\n}\n","export const signOut = async () => {\n    return fetch(\"/api/patient/sign-out\")\n}\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getPatient = state => state.patient;\n\nexport const selectPatientId = createSelector(getPatient, patient => patient.id);\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\n\nimport { getInfo } from \"../api/getInfo\";\nimport { signOut } from \"../api/signOut\";\nimport { selectPatientId } from \"../store/patient/selectors\";\n\nexport const Initialize = () => {\n    const [isGuest, setGuest] = useState(false);\n    const patientId = useSelector(selectPatientId);\n    const history = useHistory();\n\n    useEffect(() => {\n        if (patientId) {\n            history.replace(\"/patient/appointments\")\n        }\n    }, [history, patientId])\n\n    useEffect(() => {\n        (async () => {\n            try {\n                await getInfo()\n                history.replace(\"/patient/appointments\")\n            }\n            catch (e) {\n                setGuest(true);\n            }\n        })();\n    }, [history]);\n\n    return (\n        <>\n            <div>Загрузка...</div>\n            {isGuest ? <Link to={\"/patient/sign-in\"}>Вход</Link> : null}\n            {isGuest ? <Link to={\"/patient/sign-up\"}>Регистрация</Link> : null}\n            {patientId ? <a href={\"/patient/sign-in\"} onClick={signOut}>Выход</a> : null}\n        </>\n    )\n}\n","export const signIn = async ({ username, password }) => {\n    return fetch(\"/api/patient/sign-in\", {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            username,\n            password\n        })\n    })\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    id: 0\n};\n\nconst patient = createSlice({\n    name: \"user\",\n    initialState,\n    reducers: {\n        fillUser(state, action) {\n            state.id = action.payload.id;\n        }\n    }\n})\n\nexport const { actions, reducer } = patient;\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { call, put, takeLatest} from \"redux-saga/effects\";\n\nimport { signIn } from \"../api/signIn\";\n\nimport { actions } from \"../store/patient\";\n\nexport const signInAsync = createAction(\"signIn\");\n\nfunction* signInWorker(action) {\n    const { username, password } = action.payload;\n\n    const response = yield call(signIn, {\n        username,\n        password\n    })\n\n    if (!response.ok) {\n        return;\n    }\n\n    yield put(actions.fillUser({ id: response.id }))\n    document.location.href = \"/patient\"\n}\n\nexport function* signInWatcher() {\n    yield takeLatest(signInAsync.type, signInWorker);\n}\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\n\nimport { signInAsync } from \"../saga/signInAsync\";\n\nexport const Signin = () => {\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    const dispatch = useDispatch();\n\n    const onSubmitHandler = e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        dispatch(signInAsync({ username, password }))\n    }\n\n    return (\n        <div>\n            <form onSubmit={onSubmitHandler}>\n                <div>\n                    <label>Логин</label>\n                    <input type={\"text\"} value={username} onChange={e => setUsername(e.target.value)}/>\n                </div>\n                <div>\n                    <label>Пароль</label>\n                    <input type={\"password\"} value={password} onChange={e => setPassword(e.target.value)}/>\n                </div>\n                <div>\n                    <input type={\"submit\"} value={\"Вход\"}/>\n                </div>\n            </form>\n            <Link to={\"/patient/sign-up\"}>Регистрация</Link>\n        </div>\n    );\n};\n","import { getUnixTime } from \"date-fns\";\n\nexport const signUp = async ({ username, password, user }) => {\n    const { surname, name, dateOfBirth } = user\n    return fetch(\"/api/patient/sign-up\", {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            username,\n            password,\n            surname,\n            name,\n            dateOfBirth: getUnixTime(dateOfBirth) * 1000,\n        })\n    })\n}\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { call, takeLatest } from \"redux-saga/effects\";\n\nimport { signUp } from \"../api/signUp\";\nimport {parse} from \"date-fns\";\n\nexport const signUpAsync = createAction(\"signUp\");\n\nfunction* signUpWorker(action) {\n    const {\n        username,\n        password,\n        user: {\n            surname,\n            name,\n            dateOfBirth\n        }\n    } = action.payload;\n\n    console.log(dateOfBirth, parse(dateOfBirth, \"yyyy-MM-dd\", new Date()))\n    const response = yield call(signUp, {\n        username,\n        password,\n        user: {\n            surname,\n            name,\n            dateOfBirth: parse(dateOfBirth, \"yyyy-MM-dd\", new Date())\n        }\n    })\n\n    if (!response.ok) {\n        return;\n    }\n\n    document.location.href = \"/patient\"\n}\n\nexport function* signUpWatcher() {\n    yield takeLatest(signUpAsync.type, signUpWorker)\n}\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {signUpAsync} from \"../saga/signUpAsync\";\n\nexport const Signup = () => {\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [surname, setSurname] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const [dateOfBirth, setDateOfBirth] = useState(\"\");\n\n    const dispatch = useDispatch();\n\n    const onSubmitHandler = e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        dispatch(signUpAsync({\n            username,\n            password,\n            user: {\n                surname,\n                name,\n                dateOfBirth\n            }\n        }))\n    }\n\n    return (\n        <div>\n            <form onSubmit={onSubmitHandler}>\n                <div>\n                    <label>Логин</label>\n                    <input type={\"text\"} value={username} onChange={e => setUsername(e.target.value)}/>\n                </div>\n                <div>\n                    <label>Пароль</label>\n                    <input type={\"password\"} value={password} onChange={e => setPassword(e.target.value)}/>\n                </div>\n                <div>\n                    <label>Фамилия</label>\n                    <input type={\"text\"} value={surname} onChange={e => setSurname(e.target.value)}/>\n                </div>\n                <div>\n                    <label>Имя</label>\n                    <input type={\"text\"} value={name} onChange={e => setName(e.target.value)}/>\n                </div>\n                <div>\n                    <label>Дата рождения</label>\n                    <input type={\"date\"} value={dateOfBirth} onChange={e => setDateOfBirth(e.target.value)}/>\n                </div>\n                <div>\n                    <input type={\"submit\"} value={\"Зарегистрироваться\"}/>\n                </div>\n            </form>\n        </div>\n    )\n}\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { call, put, takeLatest } from \"redux-saga/effects\";\n\nimport { getInfo } from \"../api/getInfo\";\n\nimport { actions } from \"../store/patient\";\n\nexport const getPatientInfoAsync = createAction(\"getPatientInfoAsync\");\n\nfunction* getPatientWorker() {\n    const patient = yield call(getInfo);\n    yield put(actions.fillUser(patient));\n}\n\nexport function* getPatientWatcher() {\n    yield takeLatest(getPatientInfoAsync.type, getPatientWorker)\n}\n","import { interceptResponse } from \"./responseInterceptor\";\n\nexport const getAppointments = async () => {\n    const response = await fetch(\"/api/patient/appointments\");\n\n    if (interceptResponse(response)) {\n        return response.json()\n    }\n\n    return Promise.reject()\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    appointments: []\n}\n\nconst appointments = createSlice({\n    name: \"appointments\",\n    initialState,\n    reducers: {\n        fill: (state, action) => {\n            state.appointments = action.payload;\n        }\n    }\n})\n\nexport const { actions, reducer } = appointments;\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { call, put, takeLatest } from \"redux-saga/effects\";\n\nimport { getAppointments } from \"../api/getAppointments\";\n\nimport { actions } from \"../store/appointments\";\n\nexport const getAppointmentsAsync = createAction(\"getAppointmentsAsync\");\n\nfunction* getAppointmentsWorker() {\n    const appointments = yield call(getAppointments)\n    yield put(actions.fill(appointments))\n}\n\nexport function* getAppointmentsWatcher() {\n    yield takeLatest(getAppointmentsAsync.type, getAppointmentsWorker)\n}\n","import { interceptResponse } from \"./responseInterceptor\";\n\nexport const getDoctors = async () => {\n    const response = await fetch(\"/api/patient/doctors\");\n\n    if (interceptResponse(response)) {\n        return response.json()\n    }\n\n    return Promise.reject()\n}\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    doctors: []\n};\n\nconst doctors = createSlice({\n    name: \"doctors\",\n    initialState,\n    reducers: {\n        fill(state, action) {\n            state.doctors = action.payload;\n        }\n    }\n})\n\nexport const { actions, reducer } = doctors;\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { call, takeLatest, put } from \"redux-saga/effects\";\n\nimport { getDoctors } from \"../api/getDoctors\";\n\nimport { actions } from \"../store/doctors\";\n\nexport const getDoctorsAsync = createAction(\"getDoctorsAsync\");\n\nfunction* getDoctorsWorker() {\n    const doctors = yield call(getDoctors);\n    yield put(actions.fill(doctors));\n}\n\nexport function* getDoctorsWatcher() {\n    yield takeLatest(getDoctorsAsync.type, getDoctorsWorker)\n}\n","import { getUnixTime } from \"date-fns\";\n\nexport const registerAppointment = async ({ doctorId, date }) => {\n    await fetch(\"/api/patient/appointments\", {\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            doctorId,\n            date: getUnixTime(date) * 1000\n        })\n    })\n}\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { call, put, takeLatest } from \"redux-saga/effects\";\n\nimport { registerAppointment } from \"../api/registerAppointment\";\n\nimport { getAppointmentsAsync } from \"./getAppointmentsAsync\";\n\nexport const registerAppointmentAsync = createAction(\"registerAppointmentAsync\");\n\nfunction* registerAppointmentWorker(action) {\n    const { doctorId, date } = action.payload;\n\n    yield call(registerAppointment, {\n        doctorId,\n        date,\n    })\n\n    yield put(getAppointmentsAsync())\n}\n\nexport function* registerAppointmentWatcher() {\n    yield takeLatest(registerAppointmentAsync.type, registerAppointmentWorker);\n}\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getDoctor = state => state.doctors;\n\nexport const selectDoctors = createSelector(getDoctor, doctors => doctors.doctors);\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getAppointments = state => state.appointments;\n\nexport const selectAppointments = createSelector(getAppointments, appointments => appointments.appointments)\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { format, parse } from \"date-fns\";\n\nimport { signOut } from \"../api/signOut\";\n\nimport { getPatientInfoAsync } from \"../saga/getPatientInfoAsync\";\nimport { getAppointmentsAsync } from \"../saga/getAppointmentsAsync\";\nimport { getDoctorsAsync } from \"../saga/getDoctorsAsync\";\nimport { registerAppointmentAsync } from \"../saga/registerAppointmentAsync\";\n\nimport { selectDoctors } from \"../store/doctors/selectors\";\nimport { selectPatientId } from \"../store/patient/selectors\";\nimport { selectAppointments } from \"../store/appointments/selectors\";\n\nexport const Appointments = () => {\n    const [doctorId, setDoctorId] = useState(\"\");\n    const [appointmentAt, setAppointmentAt] = useState(\"\");\n\n    const dispatch = useDispatch();\n    const appointments = useSelector(selectAppointments);\n    const doctors = useSelector(selectDoctors);\n    const patientId = useSelector(selectPatientId);\n\n    useEffect(() => {\n        dispatch(getPatientInfoAsync())\n        dispatch(getAppointmentsAsync());\n        dispatch(getDoctorsAsync())\n    }, [dispatch])\n\n    const onSubmitHandler = e => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const date = parse(appointmentAt, \"HH:mm\", new Date());\n        dispatch(registerAppointmentAsync({\n            doctorId,\n            date,\n        }))\n    }\n\n    return (\n        <div>\n            {patientId ? <a href={\"/patient/sign-in\"} onClick={signOut}>Выход</a> : null}\n            <div>\n                <label>Добавить</label>\n                <form onSubmit={onSubmitHandler}>\n                    <select required={true} onChange={e => setDoctorId(e.target.value)}>\n                        <option value={\"\"}>Выберите</option>\n                        {doctors.map(one => (\n                            <option key={one.id} value={one.id}>{one.surname} {one.name}</option>\n                        ))}\n                    </select>\n                    <select value={appointmentAt} required={true} onChange={e => setAppointmentAt(e.target.value)}>\n                        <option value={\"\"}>Выберите</option>\n                        <option value={\"10:30\"}>10:30</option>\n                        <option value={\"10:50\"}>10:50</option>\n                        <option value={\"13:30\"}>13:30</option>\n                    </select>\n                    <input type={\"submit\"} value={\"Записаться\"} />\n                </form>\n            </div>\n            {appointments.length > 0 ?\n                (\n                    <ul>\n                        {appointments.map(one => (\n                            <li key={one.id}>\n                                <div>\n                                    {one.surname}\n                                    {one.name}\n                                    {format(one.date, \"dd.MM.yyyy HH:mm\")}\n                                </div>\n                            </li>\n                        ))}\n                    </ul>\n                )\n                :\n                <p>Нет записей</p>\n            }\n        </div>\n    )\n}\n","import { Route, Switch, Redirect } from \"react-router-dom\";\n\nimport { Initialize } from \"../initialize/Initialize\";\nimport { Signin } from \"../signin/Signin\";\nimport { Signup } from \"../signup/Signup\";\nimport { Appointments } from \"../appointments/Appointments\";\n\nexport const App = () => {\n    return (\n        <Switch>\n            <Route exact={true} path={\"/patient\"} component={Initialize}/>\n            <Route path={\"/patient/sign-in\"} component={Signin} />\n            <Route path={\"/patient/sign-up\"} component={Signup} />\n            <Route path={\"/patient/appointments\"} component={Appointments}/>\n            <Redirect to={\"/patient\"} />\n        </Switch>\n    )\n}\n","import { all, call } from \"redux-saga/effects\";\n\nimport { signInWatcher } from \"../saga/signInAsync\";\nimport { signUpWatcher } from \"../saga/signUpAsync\";\nimport { getPatientWatcher } from \"../saga/getPatientInfoAsync\";\nimport { getDoctorsWatcher } from \"../saga/getDoctorsAsync\";\nimport { getAppointmentsWatcher } from \"../saga/getAppointmentsAsync\";\nimport { registerAppointmentWatcher } from \"../saga/registerAppointmentAsync\";\n\nexport function* sagas() {\n    yield all([\n        call(signInWatcher),\n        call(signUpWatcher),\n        call(getPatientWatcher),\n        call(getDoctorsWatcher),\n        call(getAppointmentsWatcher),\n        call(registerAppointmentWatcher)\n    ])\n}\n","import { combineReducers } from \"redux\";\n\nimport { reducer as doctors } from \"./doctors\";\nimport { reducer as appointments } from \"./appointments\";\nimport { reducer as patient } from \"./patient\";\n\nexport const reducer = combineReducers({\n    patient,\n    doctors,\n    appointments\n})\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport { sagas } from \"./sagas\";\nimport { reducer } from \"./reducer\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [...getDefaultMiddleware(), sagaMiddleware];\n\nexport const store = configureStore({\n    reducer,\n    middleware\n});\n\nsagaMiddleware.run(sagas);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\n\nimport { App } from './app/App';\n\nimport { store } from \"./store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <BrowserRouter>\n                <App />\n            </BrowserRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}